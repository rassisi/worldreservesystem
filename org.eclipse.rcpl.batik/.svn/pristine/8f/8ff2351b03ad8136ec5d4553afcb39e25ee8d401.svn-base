package com.joffice.batik;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;

import javafx.scene.image.Image;

import org.apache.batik.transcoder.TranscoderException;
import org.apache.batik.transcoder.TranscoderInput;
import org.apache.batik.transcoder.TranscoderOutput;
import org.apache.batik.transcoder.image.PNGTranscoder;
import org.eclipse.fxrcplight.model.cdo.client.JOSession;

public class JOSVG {

	// public static void main(String[] args) throws Exception {
	//
	// // new JOSVG().createPng("http://localhost/svg/anchor.svg", 16, 16);
	//
	// new JOSVG()
	// .createPng(
	// new File(
	// "c:/Users/ramin/AppData/Local/Temp/joffice/cache/ryanlerch_scissors_open_V2.svg"),
	// 100, 100);
	//
	// }

	public Image createPng(String svgUrl, File pngFile, double widthAndHeight)
			throws TranscoderException, IOException {
		return createPng(svgUrl, pngFile, widthAndHeight, widthAndHeight);
	}

	public Image createPng(String svgUrl, File pngFile, double width,
			double height) throws TranscoderException, IOException,
			FileNotFoundException {

		URL url = new URL(svgUrl);

		boolean localFile = "file".equals(url.getProtocol());

		if (!localFile && !existsAtUrl(svgUrl)) {
			throw new FileNotFoundException("File not found: " + svgUrl);
		}

		// String fileName = url.getFile();

		TranscoderInput input_svg_image = new TranscoderInput(svgUrl);

		String pngFileName;

		if (localFile) {
			pngFileName = url.getFile();
		} else {

			pngFileName = pngFile.getAbsolutePath();
		}

		new File(pngFileName).getParentFile().mkdirs();
		OutputStream png_ostream = new FileOutputStream(pngFileName);
		TranscoderOutput output_png_image = new TranscoderOutput(png_ostream);
		// Step-3: Create PNGTranscoder and define hints if required
		PNGTranscoder pngTranscoder = new PNGTranscoder();
		pngTranscoder.addTranscodingHint(PNGTranscoder.KEY_HEIGHT,
				(float) height);
		pngTranscoder
				.addTranscodingHint(PNGTranscoder.KEY_WIDTH, (float) width);
		pngTranscoder.transcode(input_svg_image, output_png_image);
		png_ostream.flush();
		png_ostream.close();
		File f = new File(pngFileName);
		URL u = f.toURI().toURL();
		return new Image(u.toExternalForm());
	}

	public Image createPng(InputStream is, String fileName, double width,
			double height) throws TranscoderException, IOException {

		TranscoderInput input_svg_image = new TranscoderInput(is);

		String folderName = "";
		if (width == height) {
			folderName = "" + (int) width;
		} else {
			folderName = (int) width + "_" + (int) height;
		}
		if (!fileName.endsWith(".png")) {
			fileName += ".png";
		}
		String pngFileName = JOSession.cacheDir + "/images/" + folderName
				+ fileName;

		new File(pngFileName).getParentFile().mkdirs();
		OutputStream png_ostream = new FileOutputStream(pngFileName);
		TranscoderOutput output_png_image = new TranscoderOutput(png_ostream);
		// Step-3: Create PNGTranscoder and define hints if required
		PNGTranscoder pngTranscoder = new PNGTranscoder();
		pngTranscoder.addTranscodingHint(PNGTranscoder.KEY_HEIGHT,
				(float) height);
		pngTranscoder
				.addTranscodingHint(PNGTranscoder.KEY_WIDTH, (float) width);

		pngTranscoder.transcode(input_svg_image, output_png_image);
		png_ostream.flush();
		png_ostream.close();
		File f = new File(pngFileName);
		URL u = f.toURI().toURL();
		return new Image(u.toExternalForm());
	}

	/**
	 * @param file
	 * @param width
	 * @param height
	 * @return
	 * @throws TranscoderException
	 * @throws IOException
	 */
	public Image createPng(File file, double width, double height)
			throws TranscoderException, IOException {

		try {
			TranscoderInput input_svg_image = new TranscoderInput(file.toURI()
					.toString());

			String folderName = "";
			if (width == height) {
				folderName = "" + (int) width + "/";
			} else {
				folderName = (int) width + "_" + (int) height + "/";
			}

			String pngFileName = JOSession.cacheDir
					+ "/images/"
					+ folderName
					+ file.getName().replaceAll("svg/", "")
							.replaceAll(".svg", ".png");

			new File(pngFileName).getParentFile().mkdirs();
			OutputStream png_ostream = new FileOutputStream(pngFileName);
			TranscoderOutput output_png_image = new TranscoderOutput(
					png_ostream);
			// Step-3: Create PNGTranscoder and define hints if required
			PNGTranscoder pngTranscoder = new PNGTranscoder();
			pngTranscoder.addTranscodingHint(PNGTranscoder.KEY_HEIGHT,
					(float) height);
			pngTranscoder.addTranscodingHint(PNGTranscoder.KEY_WIDTH,
					(float) width);

			pngTranscoder.transcode(input_svg_image, output_png_image);
			png_ostream.flush();
			png_ostream.close();

			File f = new File(pngFileName);

			URL u = f.toURI().toURL();
			return new Image(u.toExternalForm());
		} catch (Exception ex) {
			// System. out.println(ex.getMessage());
		}
		return null;
	}

	private boolean existsAtUrl(String URLName) {
		try {
			HttpURLConnection.setFollowRedirects(false);
			// HttpURLConnection.setInstanceFollowRedirects(false)
			HttpURLConnection con = (HttpURLConnection) new URL(URLName)
					.openConnection();
			con.setRequestMethod("HEAD");
			return (con.getResponseCode() == HttpURLConnection.HTTP_OK);
		} catch (Exception e) {
			return false;
		}
	}
}
