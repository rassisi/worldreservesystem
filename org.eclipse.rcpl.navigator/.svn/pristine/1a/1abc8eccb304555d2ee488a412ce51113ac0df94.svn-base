/*******************************************************************************
 * Copyright (c) 2003 - 2014 Ramin Assisi and others.
 * All rights reserved. This program and the accompanying materials 
 * are made available under the terms of the Common Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 * 
 * Contributors:
 *     Ramin Assisi - initial implementation
 *******************************************************************************/

package org.eclipse.rcpl.navigator.tree.parts;

import java.io.File;
import java.io.FileNotFoundException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.fx.emf.edit.ui.AdapterFactoryTreeCellFactory;
import org.eclipse.fx.emf.edit.ui.AdapterFactoryTreeItem;
import org.eclipse.fx.emf.edit.ui.EAttributeCellEditHandler;
import org.eclipse.fx.emf.edit.ui.dnd.CellDragAdapter;
import org.eclipse.fx.emf.edit.ui.dnd.EditingDomainCellDropAdapter;
import org.eclipse.fxrcplight.IEditor;
import org.eclipse.fxrcplight.IOfficeUIC;
import org.eclipse.fxrcplight.IResourceEntry;
import org.eclipse.fxrcplight.IToolComponent;
import org.eclipse.fxrcplight.IToolGroup;
import org.eclipse.fxrcplight.IToolRegistry;
import org.eclipse.fxrcplight.JOTool;
import org.eclipse.fxrcplight.Rcpl;
import org.eclipse.fxrcplight.RcplUic;
import org.eclipse.fxrcplight.homepages.JOOverviewHomePage;
import org.eclipse.fxrcplight.model.cdo.client.JOSession;
import org.eclipse.fxrcplight.upload.DownloadClient;
import org.eclipse.fxrcplight.util.JOUtil2;
import org.eclipse.net4j.util.event.IEvent;
import org.eclipse.net4j.util.event.IListener;
import org.eclipse.net4j.util.lifecycle.LifecycleException;
import org.eclipse.rcpl.model_2_0_0.rcpl.Folder;
import org.eclipse.rcpl.model_2_0_0.rcpl.Preference;
import org.eclipse.rcpl.model_2_0_0.rcpl.Preferences;
import org.eclipse.rcpl.model_2_0_0.rcpl.RcplPackage;
import org.eclipse.rcpl.model_2_0_0.rcpl.Resource;
import org.eclipse.rcpl.model_2_0_0.rcpl.Tool;
import org.eclipse.rcpl.navigator.tree.handlers.AddOfficeFolderHandler;
import org.eclipse.rcpl.navigator.tree.handlers.AddPreferenceHandler;
import org.eclipse.rcpl.navigator.tree.handlers.AddPreferencesHandler;
import org.eclipse.rcpl.navigator.tree.handlers.DeleteOfficeDocumentHandler;
import org.eclipse.rcpl.navigator.tree.handlers.DeleteOfficeFolderHandler;
import org.eclipse.rcpl.navigator.tree.handlers.DeletePreferenceHandler;
import org.eclipse.rcpl.navigator.tree.handlers.DeletePreferencesHandler;
import org.eclipse.rcpl.navigator.tree.handlers.JOAbstractEmfHandler;
import org.eclipse.rcpl.navigator.tree.model.manager.UCEmfTreeModelManagerImpl;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.EventHandler;
import javafx.scene.Node;
import javafx.scene.control.SelectionMode;
import javafx.scene.control.Tab;
import javafx.scene.control.TreeItem;
import javafx.scene.control.TreeView;
import javafx.scene.input.MouseEvent;
import javafx.scene.text.Text;

public class EEmfTreeTreePart extends JOTool {

	private EObject root;

	private Node node;

	private TreeView<Object> treeView;

	private AdapterFactoryTreeItem<Object> adapterFactoryTreeItem2;

	// private CDOObject cdoobj;

	private EObject selectedObject;

	private UCEmfTreeModelManagerImpl emfTreeManager;

	// private NavigatorRcplPlugin useCase;

	private HashMap<Class<? extends EObject>, JOAbstractEmfHandler<?>> addHandlerRegistry = new HashMap<Class<? extends EObject>, JOAbstractEmfHandler<?>>();
	private HashMap<Class<? extends EObject>, JOAbstractEmfHandler<?>> deleteHandlerRegistry = new HashMap<Class<? extends EObject>, JOAbstractEmfHandler<?>>();

	private HashMap<String, File> documentRegistry = new HashMap<String, File>();

	public EEmfTreeTreePart(Tool tool, EObject root, boolean showRoot) {
		super(tool);
		this.root = root;
		registerHandlers();
		// if (useCase != null && tool != null && tool.getId() != null) {
		// useCase = new NavigatorRcplPlugin(tool);
		// }
		// TreeView
		treeView = new TreeView<>();
		treeView.setPrefHeight(1000);
		emfTreeManager = new UCEmfTreeModelManagerImpl();

		refresh();

		node = treeView;
		treeView.setShowRoot(showRoot);
		treeView.requestFocus();
		treeView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);

		treeView.setId("emfTreeView");

		treeView.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<Object>() {

			@Override
			public void changed(ObservableValue<? extends Object> arg0, Object oldItem, Object newItem) {

				if (newItem instanceof AdapterFactoryTreeItem) {

					Object value = ((AdapterFactoryTreeItem) newItem).getValue();

					if (value instanceof Resource) {
						selectedObject = (EObject) value;
						documentSelected((Resource) value);
					}

					else if (value instanceof EObject) {
						selectedObject = (EObject) value;
						// if (useCase != null) {
						// useCase.getController().updateBindings(selectedObject,
						// emfTreeManager.getEditingDomain());
						// }
						doSelection();
					}
				}

			}

		});

		addCDOListener();

		addMouseListener();
	}

	protected void doSelection() {

	}

	private void addMouseListener() {
		treeView.setOnMouseClicked(new EventHandler<MouseEvent>() {
			@Override
			public void handle(MouseEvent mouseEvent) {

				if (mouseEvent.isSecondaryButtonDown() || mouseEvent.isMiddleButtonDown()) {
					return;
				}
				EObject sel = getSelectedObject();
				if (sel instanceof Resource) {

					Resource doc = (Resource) sel;
					String uri = doc.getUri();
					String id = doc.getId();
					URL url = null;
					try {
						url = new URL(doc.getUri());
					} catch (Exception e) {
						//
					}

					if (mouseEvent.getClickCount() > 1) {

						if (id != null) {
							try {
								File file = documentRegistry.get(id);
								if (file == null) {
									file = new DownloadClient().download(JOSession.getDefault().userId, id);
									documentRegistry.put(id, file);
								}
								((IOfficeUIC) Rcpl.UIC).openDocument(file);
							} catch (MalformedURLException | FileNotFoundException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}

						} else if (uri != null && uri.length() > 0) {
							((IOfficeUIC) Rcpl.UIC).openDocument(new File(uri));
						} else {
							if (url != null) {
								((IOfficeUIC) Rcpl.UIC).openDocument(url);
							}
						}
						mouseEvent.consume();

					}
				} else {
					try {
						((JOOverviewHomePage) ((RcplUic) Rcpl.UIC).getOverviewPage()).setDetailNode(null);
					} catch (Exception ex) {
						ex.printStackTrace();
					}
				}
			}
		});
	}

	/**
	 * @param doc
	 */
	private void documentSelected(Resource doc) {

		String uri = doc.getUri();
		String id = doc.getId();
		URL url = null;
		try {
			url = new URL(doc.getUri());
		} catch (Exception e) {
			//
		}
		File file = null;
		IEditor f = Rcpl.factory.createEditor(new Tab(), false);

		if (id != null) {
			try {
				file = documentRegistry.get(id);
				if (file == null) {
					file = new DownloadClient().download(JOSession.getDefault().userId, id);
					if (file == null) {
						((JOOverviewHomePage) ((RcplUic) Rcpl.UIC).getOverviewPage())
								.setDetailNode(new Text("Connection failed"));
						return;
					}
					documentRegistry.put(id, file);
				}
			} catch (MalformedURLException | FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		} else if (uri != null && uri.length() > 0) {
			file = new File(uri);
		} else {
			if (url != null) {
				file = JOUtil2.copyFileFromUrlToCache(url, false);
			}
		}

		if (file != null) {

			// TODO: Listener registrieren!!!
			// IDocument doc1 = JOAbstractDocument.load(file, false, null,
			// true);
			// f.setDocument(doc1);
			// ((JOOverviewHomePage) ((JOUIC) JO.UIC).getOverviewPage())
			// .hideSplash();
			// ((JOOverviewHomePage) ((JOUIC) JO.UIC).getOverviewPage())
			// .setDetailNode(f.getMainPane());
			//
			// doc1.setReadOnly();
			//
			// doc1.setEditorFigure(f);
			// JO.UIC.setEditor(f);
			// f.setDirtyLayout(null);
			// f.setScale(0.5);
			// f.setPageColumns(2);
		}

	}

	/**
	 * 
	 */
	private void registerHandlers() {
		addHandlerRegistry.put(Folder.class, new AddOfficeFolderHandler(this));
		addHandlerRegistry.put(Preferences.class, new AddPreferencesHandler(this));
		addHandlerRegistry.put(Preference.class, new AddPreferenceHandler(this));
		deleteHandlerRegistry.put(Folder.class, new DeleteOfficeFolderHandler(this));
		deleteHandlerRegistry.put(Resource.class, new DeleteOfficeDocumentHandler(this));
		deleteHandlerRegistry.put(Preferences.class, new DeletePreferencesHandler(this));
		deleteHandlerRegistry.put(Preference.class, new DeletePreferenceHandler(this));
	}

	/**
	 * @return
	 */
	public JOAbstractEmfHandler<?> getAddHandler() {
		EObject sel = getSelectedObject();
		for (Class<? extends EObject> cl : addHandlerRegistry.keySet()) {
			Class<?>[] interfaces = sel.getClass().getInterfaces();
			for (Class<?> ci : interfaces) {
				if (cl == ci) {
					return addHandlerRegistry.get(cl);
				}
			}
		}
		return null;
	}

	/**
	 * @return
	 */
	public JOAbstractEmfHandler<?> getDeleteHandler() {
		EObject sel = getSelectedObject();
		for (Class<? extends EObject> cl : deleteHandlerRegistry.keySet()) {
			Class<?>[] interfaces = sel.getClass().getInterfaces();
			for (Class<?> ci : interfaces) {
				if (cl == ci) {
					return deleteHandlerRegistry.get(cl);
				}
			}
		}
		return null;
	}

	/**
	 * 
	 */
	private void addCDOListener() {
		if (JOSession.getDefault().getSession() != null) {
			JOSession.getDefault().getSession().addListener(new IListener() {

				@Override
				public void notifyEvent(IEvent event) {
					// TODO Auto-generated method stub

					// if (event instanceof CDOSessionInvalidationEvent) {
					//
					// CDOSessionInvalidationEvent ev =
					// (CDOSessionInvalidationEvent) event;
					//
					// List<CDORevisionKey> list = ev.getChangedObjects();
					// CDOTransaction trans = ev.getLocalTransaction();
					// if (trans != null) {
					// for (CDORevisionKey cdoRevisionKey : list) {
					// CDOID id = cdoRevisionKey.getID();
					// // cdoobj = ((CDOView) trans).getObject(id,
					// // true);
					// }
					// }
					// }

					javafx.application.Platform.runLater(new Runnable() {

						@Override
						public void run() {
							adapterFactoryTreeItem2 = null;
							refresh();
						}
					});

				}
			});
		}
	}

	private void refresh() {

		try {
			if (adapterFactoryTreeItem2 == null) {

				adapterFactoryTreeItem2 = new AdapterFactoryTreeItem<Object>(root, emfTreeManager.getAdapterFactory());

				treeView.setRoot(adapterFactoryTreeItem2);

				AdapterFactoryTreeCellFactory<Object> treeCellFactory = new AdapterFactoryTreeCellFactory<Object>(
						emfTreeManager.getAdapterFactory());
				// add edit support
				treeCellFactory.addCellEditHandler(new EAttributeCellEditHandler(
						RcplPackage.eINSTANCE.getTools().getEIDAttribute(), getEditingDomain()));
				treeCellFactory.addCellEditHandler(
						new EAttributeCellEditHandler(RcplPackage.eINSTANCE.getLayoutable_Id(), getEditingDomain()));

				treeCellFactory.addCellEditHandler(
						new EAttributeCellEditHandler(RcplPackage.eINSTANCE.getLayoutable_Id(), getEditingDomain()));

				// adds drag support
				treeCellFactory.addCellCreationListener(new CellDragAdapter());
				// adds drop support

				if (JOSession.getDefault().isDemo()) {
					treeView.setCellFactory(treeCellFactory);
					treeView.setEditable(false);
				} else {

					EditingDomainCellDropAdapter dropAdapter = new EditingDomainCellDropAdapter(getEditingDomain());
					dropAdapter.setFeedbackHandler(new EditingDomainCellDropAdapter.DefaultFeedbackHandler());
					treeCellFactory.addCellCreationListener(dropAdapter);
					treeView.setCellFactory(treeCellFactory);
					EEmfTreeContextMenuProvider contextMenuProvider = new EEmfTreeContextMenuProvider(this);
					treeCellFactory.addCellUpdateListener(contextMenuProvider);
					treeView.setEditable(true);
				}
				treeView.getRoot().setExpanded(true);
				for (TreeItem<?> item : treeView.getRoot().getChildren()) {
					item.setExpanded(true);
				}
			}
		} catch (LifecycleException ex) {
			//
		}

	}

	public EditingDomain getEditingDomain() {
		return emfTreeManager.getEditingDomain();
	}

	@Override
	public Node getNode() {
		return node;
	}

	public EObject getSelectedObject() {
		return selectedObject;
	}

	public TreeView<Object> getTreeView() {
		return treeView;
	}

	@Override
	public IToolRegistry getToolRegistry() {
		return null;
	}

	@Override
	public IResourceEntry getEntry() {
		return null;
	}

	@Override
	public IToolComponent getToolComponent() {
		return null;
	}

	@Override
	public void setVisible(boolean visible) {
	}

	@Override
	public IToolGroup getGroup() {
		return null;
	}

	@Override
	public void setBounds(int x, int y, int Width, int height) {
	}

	@Override
	public boolean isFullSize() {
		return false;
	}

	@Override
	public int getToolHierarchy() {
		return 0;
	}

	@Override
	public Object getImage() {
		return null;
	}

	@Override
	public boolean isWrap() {
		return false;
	}

}
