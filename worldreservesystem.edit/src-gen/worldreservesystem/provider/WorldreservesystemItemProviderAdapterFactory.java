/**
 */
package worldreservesystem.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import worldreservesystem.util.WorldreservesystemAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class WorldreservesystemItemProviderAdapterFactory extends WorldreservesystemAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public WorldreservesystemItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link worldreservesystem.WorldReserveSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorldReserveSystemItemProvider worldReserveSystemItemProvider;

	/**
	 * This creates an adapter for a {@link worldreservesystem.WorldReserveSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorldReserveSystemAdapter() {
		if (worldReserveSystemItemProvider == null) {
			worldReserveSystemItemProvider = new WorldReserveSystemItemProvider(this);
		}

		return worldReserveSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link worldreservesystem.MainVault} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MainVaultItemProvider mainVaultItemProvider;

	/**
	 * This creates an adapter for a {@link worldreservesystem.MainVault}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMainVaultAdapter() {
		if (mainVaultItemProvider == null) {
			mainVaultItemProvider = new MainVaultItemProvider(this);
		}

		return mainVaultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link worldreservesystem.TransferVault} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransferVaultItemProvider transferVaultItemProvider;

	/**
	 * This creates an adapter for a {@link worldreservesystem.TransferVault}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransferVaultAdapter() {
		if (transferVaultItemProvider == null) {
			transferVaultItemProvider = new TransferVaultItemProvider(this);
		}

		return transferVaultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link worldreservesystem.TransferVaults} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransferVaultsItemProvider transferVaultsItemProvider;

	/**
	 * This creates an adapter for a {@link worldreservesystem.TransferVaults}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransferVaultsAdapter() {
		if (transferVaultsItemProvider == null) {
			transferVaultsItemProvider = new TransferVaultsItemProvider(this);
		}

		return transferVaultsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link worldreservesystem.Genesis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenesisItemProvider genesisItemProvider;

	/**
	 * This creates an adapter for a {@link worldreservesystem.Genesis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenesisAdapter() {
		if (genesisItemProvider == null) {
			genesisItemProvider = new GenesisItemProvider(this);
		}

		return genesisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link worldreservesystem.Asset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssetItemProvider assetItemProvider;

	/**
	 * This creates an adapter for a {@link worldreservesystem.Asset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssetAdapter() {
		if (assetItemProvider == null) {
			assetItemProvider = new AssetItemProvider(this);
		}

		return assetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link worldreservesystem.WorldEconomy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorldEconomyItemProvider worldEconomyItemProvider;

	/**
	 * This creates an adapter for a {@link worldreservesystem.WorldEconomy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorldEconomyAdapter() {
		if (worldEconomyItemProvider == null) {
			worldEconomyItemProvider = new WorldEconomyItemProvider(this);
		}

		return worldEconomyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link worldreservesystem.NationalEconomies} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NationalEconomiesItemProvider nationalEconomiesItemProvider;

	/**
	 * This creates an adapter for a {@link worldreservesystem.NationalEconomies}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNationalEconomiesAdapter() {
		if (nationalEconomiesItemProvider == null) {
			nationalEconomiesItemProvider = new NationalEconomiesItemProvider(this);
		}

		return nationalEconomiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link worldreservesystem.Nation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NationItemProvider nationItemProvider;

	/**
	 * This creates an adapter for a {@link worldreservesystem.Nation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNationAdapter() {
		if (nationItemProvider == null) {
			nationItemProvider = new NationItemProvider(this);
		}

		return nationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link worldreservesystem.FiatCurrency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FiatCurrencyItemProvider fiatCurrencyItemProvider;

	/**
	 * This creates an adapter for a {@link worldreservesystem.FiatCurrency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFiatCurrencyAdapter() {
		if (fiatCurrencyItemProvider == null) {
			fiatCurrencyItemProvider = new FiatCurrencyItemProvider(this);
		}

		return fiatCurrencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link worldreservesystem.Accountants} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccountantsItemProvider accountantsItemProvider;

	/**
	 * This creates an adapter for a {@link worldreservesystem.Accountants}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccountantsAdapter() {
		if (accountantsItemProvider == null) {
			accountantsItemProvider = new AccountantsItemProvider(this);
		}

		return accountantsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link worldreservesystem.Accountant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccountantItemProvider accountantItemProvider;

	/**
	 * This creates an adapter for a {@link worldreservesystem.Accountant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccountantAdapter() {
		if (accountantItemProvider == null) {
			accountantItemProvider = new AccountantItemProvider(this);
		}

		return accountantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link worldreservesystem.Material} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaterialItemProvider materialItemProvider;

	/**
	 * This creates an adapter for a {@link worldreservesystem.Material}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaterialAdapter() {
		if (materialItemProvider == null) {
			materialItemProvider = new MaterialItemProvider(this);
		}

		return materialItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link worldreservesystem.Individual} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IndividualItemProvider individualItemProvider;

	/**
	 * This creates an adapter for a {@link worldreservesystem.Individual}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndividualAdapter() {
		if (individualItemProvider == null) {
			individualItemProvider = new IndividualItemProvider(this);
		}

		return individualItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link worldreservesystem.LegalEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LegalEntityItemProvider legalEntityItemProvider;

	/**
	 * This creates an adapter for a {@link worldreservesystem.LegalEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLegalEntityAdapter() {
		if (legalEntityItemProvider == null) {
			legalEntityItemProvider = new LegalEntityItemProvider(this);
		}

		return legalEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link worldreservesystem.NewEClass17} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NewEClass17ItemProvider newEClass17ItemProvider;

	/**
	 * This creates an adapter for a {@link worldreservesystem.NewEClass17}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNewEClass17Adapter() {
		if (newEClass17ItemProvider == null) {
			newEClass17ItemProvider = new NewEClass17ItemProvider(this);
		}

		return newEClass17ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link worldreservesystem.Identities} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdentitiesItemProvider identitiesItemProvider;

	/**
	 * This creates an adapter for a {@link worldreservesystem.Identities}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIdentitiesAdapter() {
		if (identitiesItemProvider == null) {
			identitiesItemProvider = new IdentitiesItemProvider(this);
		}

		return identitiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link worldreservesystem.Wallet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WalletItemProvider walletItemProvider;

	/**
	 * This creates an adapter for a {@link worldreservesystem.Wallet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWalletAdapter() {
		if (walletItemProvider == null) {
			walletItemProvider = new WalletItemProvider(this);
		}

		return walletItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link worldreservesystem.SupplyControl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SupplyControlItemProvider supplyControlItemProvider;

	/**
	 * This creates an adapter for a {@link worldreservesystem.SupplyControl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSupplyControlAdapter() {
		if (supplyControlItemProvider == null) {
			supplyControlItemProvider = new SupplyControlItemProvider(this);
		}

		return supplyControlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link worldreservesystem.Wallets} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WalletsItemProvider walletsItemProvider;

	/**
	 * This creates an adapter for a {@link worldreservesystem.Wallets}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWalletsAdapter() {
		if (walletsItemProvider == null) {
			walletsItemProvider = new WalletsItemProvider(this);
		}

		return walletsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link worldreservesystem.Transaction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransactionItemProvider transactionItemProvider;

	/**
	 * This creates an adapter for a {@link worldreservesystem.Transaction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransactionAdapter() {
		if (transactionItemProvider == null) {
			transactionItemProvider = new TransactionItemProvider(this);
		}

		return transactionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link worldreservesystem.RegisteredAsstets} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegisteredAsstetsItemProvider registeredAsstetsItemProvider;

	/**
	 * This creates an adapter for a {@link worldreservesystem.RegisteredAsstets}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegisteredAsstetsAdapter() {
		if (registeredAsstetsItemProvider == null) {
			registeredAsstetsItemProvider = new RegisteredAsstetsItemProvider(this);
		}

		return registeredAsstetsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link worldreservesystem.AbstractVault} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbstractVaultItemProvider abstractVaultItemProvider;

	/**
	 * This creates an adapter for a {@link worldreservesystem.AbstractVault}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbstractVaultAdapter() {
		if (abstractVaultItemProvider == null) {
			abstractVaultItemProvider = new AbstractVaultItemProvider(this);
		}

		return abstractVaultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link worldreservesystem.TransactionCollection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransactionCollectionItemProvider transactionCollectionItemProvider;

	/**
	 * This creates an adapter for a {@link worldreservesystem.TransactionCollection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransactionCollectionAdapter() {
		if (transactionCollectionItemProvider == null) {
			transactionCollectionItemProvider = new TransactionCollectionItemProvider(this);
		}

		return transactionCollectionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (worldReserveSystemItemProvider != null)
			worldReserveSystemItemProvider.dispose();
		if (mainVaultItemProvider != null)
			mainVaultItemProvider.dispose();
		if (transferVaultItemProvider != null)
			transferVaultItemProvider.dispose();
		if (transferVaultsItemProvider != null)
			transferVaultsItemProvider.dispose();
		if (genesisItemProvider != null)
			genesisItemProvider.dispose();
		if (assetItemProvider != null)
			assetItemProvider.dispose();
		if (worldEconomyItemProvider != null)
			worldEconomyItemProvider.dispose();
		if (nationalEconomiesItemProvider != null)
			nationalEconomiesItemProvider.dispose();
		if (nationItemProvider != null)
			nationItemProvider.dispose();
		if (fiatCurrencyItemProvider != null)
			fiatCurrencyItemProvider.dispose();
		if (accountantsItemProvider != null)
			accountantsItemProvider.dispose();
		if (accountantItemProvider != null)
			accountantItemProvider.dispose();
		if (materialItemProvider != null)
			materialItemProvider.dispose();
		if (individualItemProvider != null)
			individualItemProvider.dispose();
		if (legalEntityItemProvider != null)
			legalEntityItemProvider.dispose();
		if (newEClass17ItemProvider != null)
			newEClass17ItemProvider.dispose();
		if (identitiesItemProvider != null)
			identitiesItemProvider.dispose();
		if (walletItemProvider != null)
			walletItemProvider.dispose();
		if (supplyControlItemProvider != null)
			supplyControlItemProvider.dispose();
		if (walletsItemProvider != null)
			walletsItemProvider.dispose();
		if (transactionItemProvider != null)
			transactionItemProvider.dispose();
		if (registeredAsstetsItemProvider != null)
			registeredAsstetsItemProvider.dispose();
		if (abstractVaultItemProvider != null)
			abstractVaultItemProvider.dispose();
		if (transactionCollectionItemProvider != null)
			transactionCollectionItemProvider.dispose();
	}

}
