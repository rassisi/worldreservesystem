/**
 */
package org.wrs.wrs.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.wrs.wrs.util.WrsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class WrsItemProviderAdapterFactory extends WrsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public WrsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.wrs.wrs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected wrsItemProvider wrsItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.wrs.wrs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createwrsAdapter() {
		if (wrsItemProvider == null) {
			wrsItemProvider = new wrsItemProvider(this);
		}

		return wrsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.wrs.Treasury} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TreasuryItemProvider treasuryItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.wrs.Treasury}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTreasuryAdapter() {
		if (treasuryItemProvider == null) {
			treasuryItemProvider = new TreasuryItemProvider(this);
		}

		return treasuryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.wrs.TransferVault} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransferVaultItemProvider transferVaultItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.wrs.TransferVault}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransferVaultAdapter() {
		if (transferVaultItemProvider == null) {
			transferVaultItemProvider = new TransferVaultItemProvider(this);
		}

		return transferVaultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.wrs.TransferVaults} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransferVaultsItemProvider transferVaultsItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.wrs.TransferVaults}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransferVaultsAdapter() {
		if (transferVaultsItemProvider == null) {
			transferVaultsItemProvider = new TransferVaultsItemProvider(this);
		}

		return transferVaultsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.wrs.Genesis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenesisItemProvider genesisItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.wrs.Genesis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenesisAdapter() {
		if (genesisItemProvider == null) {
			genesisItemProvider = new GenesisItemProvider(this);
		}

		return genesisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.wrs.Asset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssetItemProvider assetItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.wrs.Asset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssetAdapter() {
		if (assetItemProvider == null) {
			assetItemProvider = new AssetItemProvider(this);
		}

		return assetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.wrs.WorldEconomy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorldEconomyItemProvider worldEconomyItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.wrs.WorldEconomy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorldEconomyAdapter() {
		if (worldEconomyItemProvider == null) {
			worldEconomyItemProvider = new WorldEconomyItemProvider(this);
		}

		return worldEconomyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.wrs.NationalEconomies} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NationalEconomiesItemProvider nationalEconomiesItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.wrs.NationalEconomies}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNationalEconomiesAdapter() {
		if (nationalEconomiesItemProvider == null) {
			nationalEconomiesItemProvider = new NationalEconomiesItemProvider(this);
		}

		return nationalEconomiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.wrs.Nation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NationItemProvider nationItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.wrs.Nation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNationAdapter() {
		if (nationItemProvider == null) {
			nationItemProvider = new NationItemProvider(this);
		}

		return nationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.wrs.FiatCurrency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FiatCurrencyItemProvider fiatCurrencyItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.wrs.FiatCurrency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFiatCurrencyAdapter() {
		if (fiatCurrencyItemProvider == null) {
			fiatCurrencyItemProvider = new FiatCurrencyItemProvider(this);
		}

		return fiatCurrencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.wrs.Accountants} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccountantsItemProvider accountantsItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.wrs.Accountants}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccountantsAdapter() {
		if (accountantsItemProvider == null) {
			accountantsItemProvider = new AccountantsItemProvider(this);
		}

		return accountantsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.wrs.Accountant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccountantItemProvider accountantItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.wrs.Accountant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccountantAdapter() {
		if (accountantItemProvider == null) {
			accountantItemProvider = new AccountantItemProvider(this);
		}

		return accountantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.wrs.Material} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaterialItemProvider materialItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.wrs.Material}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaterialAdapter() {
		if (materialItemProvider == null) {
			materialItemProvider = new MaterialItemProvider(this);
		}

		return materialItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.wrs.Individual} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IndividualItemProvider individualItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.wrs.Individual}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndividualAdapter() {
		if (individualItemProvider == null) {
			individualItemProvider = new IndividualItemProvider(this);
		}

		return individualItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.wrs.LegalEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LegalEntityItemProvider legalEntityItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.wrs.LegalEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLegalEntityAdapter() {
		if (legalEntityItemProvider == null) {
			legalEntityItemProvider = new LegalEntityItemProvider(this);
		}

		return legalEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.wrs.Identities} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdentitiesItemProvider identitiesItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.wrs.Identities}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIdentitiesAdapter() {
		if (identitiesItemProvider == null) {
			identitiesItemProvider = new IdentitiesItemProvider(this);
		}

		return identitiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.wrs.Account} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccountItemProvider accountItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.wrs.Account}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccountAdapter() {
		if (accountItemProvider == null) {
			accountItemProvider = new AccountItemProvider(this);
		}

		return accountItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.wrs.SupplyControl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SupplyControlItemProvider supplyControlItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.wrs.SupplyControl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSupplyControlAdapter() {
		if (supplyControlItemProvider == null) {
			supplyControlItemProvider = new SupplyControlItemProvider(this);
		}

		return supplyControlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.wrs.Accounts} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccountsItemProvider accountsItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.wrs.Accounts}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccountsAdapter() {
		if (accountsItemProvider == null) {
			accountsItemProvider = new AccountsItemProvider(this);
		}

		return accountsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.wrs.Transaction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransactionItemProvider transactionItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.wrs.Transaction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransactionAdapter() {
		if (transactionItemProvider == null) {
			transactionItemProvider = new TransactionItemProvider(this);
		}

		return transactionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.wrs.RegisteredAssets} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegisteredAssetsItemProvider registeredAssetsItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.wrs.RegisteredAssets}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegisteredAssetsAdapter() {
		if (registeredAssetsItemProvider == null) {
			registeredAssetsItemProvider = new RegisteredAssetsItemProvider(this);
		}

		return registeredAssetsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.wrs.AbstractVault} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbstractVaultItemProvider abstractVaultItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.wrs.AbstractVault}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbstractVaultAdapter() {
		if (abstractVaultItemProvider == null) {
			abstractVaultItemProvider = new AbstractVaultItemProvider(this);
		}

		return abstractVaultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.wrs.TransactionCollection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransactionCollectionItemProvider transactionCollectionItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.wrs.TransactionCollection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransactionCollectionAdapter() {
		if (transactionCollectionItemProvider == null) {
			transactionCollectionItemProvider = new TransactionCollectionItemProvider(this);
		}

		return transactionCollectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.wrs.Node} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeItemProvider nodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.wrs.Node}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeAdapter() {
		if (nodeItemProvider == null) {
			nodeItemProvider = new NodeItemProvider(this);
		}

		return nodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.wrs.NetworkEngine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkEngineItemProvider networkEngineItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.wrs.NetworkEngine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkEngineAdapter() {
		if (networkEngineItemProvider == null) {
			networkEngineItemProvider = new NetworkEngineItemProvider(this);
		}

		return networkEngineItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (wrsItemProvider != null) wrsItemProvider.dispose();
		if (treasuryItemProvider != null) treasuryItemProvider.dispose();
		if (transferVaultItemProvider != null) transferVaultItemProvider.dispose();
		if (transferVaultsItemProvider != null) transferVaultsItemProvider.dispose();
		if (genesisItemProvider != null) genesisItemProvider.dispose();
		if (assetItemProvider != null) assetItemProvider.dispose();
		if (worldEconomyItemProvider != null) worldEconomyItemProvider.dispose();
		if (nationalEconomiesItemProvider != null) nationalEconomiesItemProvider.dispose();
		if (nationItemProvider != null) nationItemProvider.dispose();
		if (fiatCurrencyItemProvider != null) fiatCurrencyItemProvider.dispose();
		if (accountantsItemProvider != null) accountantsItemProvider.dispose();
		if (accountantItemProvider != null) accountantItemProvider.dispose();
		if (materialItemProvider != null) materialItemProvider.dispose();
		if (individualItemProvider != null) individualItemProvider.dispose();
		if (legalEntityItemProvider != null) legalEntityItemProvider.dispose();
		if (identitiesItemProvider != null) identitiesItemProvider.dispose();
		if (accountItemProvider != null) accountItemProvider.dispose();
		if (supplyControlItemProvider != null) supplyControlItemProvider.dispose();
		if (accountsItemProvider != null) accountsItemProvider.dispose();
		if (transactionItemProvider != null) transactionItemProvider.dispose();
		if (registeredAssetsItemProvider != null) registeredAssetsItemProvider.dispose();
		if (abstractVaultItemProvider != null) abstractVaultItemProvider.dispose();
		if (transactionCollectionItemProvider != null) transactionCollectionItemProvider.dispose();
		if (nodeItemProvider != null) nodeItemProvider.dispose();
		if (networkEngineItemProvider != null) networkEngineItemProvider.dispose();
	}

}
