/**
 */
package org.wrs.model.wrs.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.wrs.model.wrs.util.WrsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class WrsItemProviderAdapterFactory extends WrsAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public WrsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.WRS} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WRSItemProvider wrsItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.WRS}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWRSAdapter() {
		if (wrsItemProvider == null) {
			wrsItemProvider = new WRSItemProvider(this);
		}

		return wrsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.Treasury} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TreasuryItemProvider treasuryItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.Treasury}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTreasuryAdapter() {
		if (treasuryItemProvider == null) {
			treasuryItemProvider = new TreasuryItemProvider(this);
		}

		return treasuryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.TransferVault} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransferVaultItemProvider transferVaultItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.TransferVault}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransferVaultAdapter() {
		if (transferVaultItemProvider == null) {
			transferVaultItemProvider = new TransferVaultItemProvider(this);
		}

		return transferVaultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.Genesis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenesisItemProvider genesisItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.Genesis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenesisAdapter() {
		if (genesisItemProvider == null) {
			genesisItemProvider = new GenesisItemProvider(this);
		}

		return genesisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.Asset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssetItemProvider assetItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.Asset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssetAdapter() {
		if (assetItemProvider == null) {
			assetItemProvider = new AssetItemProvider(this);
		}

		return assetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.WorldEconomy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorldEconomyItemProvider worldEconomyItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.WorldEconomy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorldEconomyAdapter() {
		if (worldEconomyItemProvider == null) {
			worldEconomyItemProvider = new WorldEconomyItemProvider(this);
		}

		return worldEconomyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.NationalEconomies} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NationalEconomiesItemProvider nationalEconomiesItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.NationalEconomies}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNationalEconomiesAdapter() {
		if (nationalEconomiesItemProvider == null) {
			nationalEconomiesItemProvider = new NationalEconomiesItemProvider(this);
		}

		return nationalEconomiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.Country} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CountryItemProvider countryItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.Country}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCountryAdapter() {
		if (countryItemProvider == null) {
			countryItemProvider = new CountryItemProvider(this);
		}

		return countryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.FiatCurrency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FiatCurrencyItemProvider fiatCurrencyItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.FiatCurrency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFiatCurrencyAdapter() {
		if (fiatCurrencyItemProvider == null) {
			fiatCurrencyItemProvider = new FiatCurrencyItemProvider(this);
		}

		return fiatCurrencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.Thing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ThingItemProvider thingItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.Thing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createThingAdapter() {
		if (thingItemProvider == null) {
			thingItemProvider = new ThingItemProvider(this);
		}

		return thingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.Individual} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IndividualItemProvider individualItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.Individual}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndividualAdapter() {
		if (individualItemProvider == null) {
			individualItemProvider = new IndividualItemProvider(this);
		}

		return individualItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.LegalEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LegalEntityItemProvider legalEntityItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.LegalEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLegalEntityAdapter() {
		if (legalEntityItemProvider == null) {
			legalEntityItemProvider = new LegalEntityItemProvider(this);
		}

		return legalEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.Account} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccountItemProvider accountItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.Account}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccountAdapter() {
		if (accountItemProvider == null) {
			accountItemProvider = new AccountItemProvider(this);
		}

		return accountItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.SupplyControl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SupplyControlItemProvider supplyControlItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.SupplyControl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSupplyControlAdapter() {
		if (supplyControlItemProvider == null) {
			supplyControlItemProvider = new SupplyControlItemProvider(this);
		}

		return supplyControlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.Accounts} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccountsItemProvider accountsItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.Accounts}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccountsAdapter() {
		if (accountsItemProvider == null) {
			accountsItemProvider = new AccountsItemProvider(this);
		}

		return accountsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.Transaction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransactionItemProvider transactionItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.Transaction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransactionAdapter() {
		if (transactionItemProvider == null) {
			transactionItemProvider = new TransactionItemProvider(this);
		}

		return transactionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.RegisteredAssets} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegisteredAssetsItemProvider registeredAssetsItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.RegisteredAssets}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegisteredAssetsAdapter() {
		if (registeredAssetsItemProvider == null) {
			registeredAssetsItemProvider = new RegisteredAssetsItemProvider(this);
		}

		return registeredAssetsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.AbstractAccount} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbstractAccountItemProvider abstractAccountItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.AbstractAccount}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbstractAccountAdapter() {
		if (abstractAccountItemProvider == null) {
			abstractAccountItemProvider = new AbstractAccountItemProvider(this);
		}

		return abstractAccountItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.TransactionCollection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransactionCollectionItemProvider transactionCollectionItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.TransactionCollection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransactionCollectionAdapter() {
		if (transactionCollectionItemProvider == null) {
			transactionCollectionItemProvider = new TransactionCollectionItemProvider(this);
		}

		return transactionCollectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.Node} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeItemProvider nodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.Node}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeAdapter() {
		if (nodeItemProvider == null) {
			nodeItemProvider = new NodeItemProvider(this);
		}

		return nodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.NetworkEngine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkEngineItemProvider networkEngineItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.NetworkEngine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkEngineAdapter() {
		if (networkEngineItemProvider == null) {
			networkEngineItemProvider = new NetworkEngineItemProvider(this);
		}

		return networkEngineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.Countries} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CountriesItemProvider countriesItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.Countries}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCountriesAdapter() {
		if (countriesItemProvider == null) {
			countriesItemProvider = new CountriesItemProvider(this);
		}

		return countriesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.Nodes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodesItemProvider nodesItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.Nodes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodesAdapter() {
		if (nodesItemProvider == null) {
			nodesItemProvider = new NodesItemProvider(this);
		}

		return nodesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.Identities} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdentitiesItemProvider identitiesItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.Identities}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIdentitiesAdapter() {
		if (identitiesItemProvider == null) {
			identitiesItemProvider = new IdentitiesItemProvider(this);
		}

		return identitiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.Transactions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransactionsItemProvider transactionsItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.Transactions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransactionsAdapter() {
		if (transactionsItemProvider == null) {
			transactionsItemProvider = new TransactionsItemProvider(this);
		}

		return transactionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.AbstractTransaction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbstractTransactionItemProvider abstractTransactionItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.AbstractTransaction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbstractTransactionAdapter() {
		if (abstractTransactionItemProvider == null) {
			abstractTransactionItemProvider = new AbstractTransactionItemProvider(this);
		}

		return abstractTransactionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.NodeAccount} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeAccountItemProvider nodeAccountItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.NodeAccount}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeAccountAdapter() {
		if (nodeAccountItemProvider == null) {
			nodeAccountItemProvider = new NodeAccountItemProvider(this);
		}

		return nodeAccountItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.TransactionConditions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransactionConditionsItemProvider transactionConditionsItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.TransactionConditions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransactionConditionsAdapter() {
		if (transactionConditionsItemProvider == null) {
			transactionConditionsItemProvider = new TransactionConditionsItemProvider(this);
		}

		return transactionConditionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.TransactionCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransactionConditionItemProvider transactionConditionItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.TransactionCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransactionConditionAdapter() {
		if (transactionConditionItemProvider == null) {
			transactionConditionItemProvider = new TransactionConditionItemProvider(this);
		}

		return transactionConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.SignedInput} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SignedInputItemProvider signedInputItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.SignedInput}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSignedInputAdapter() {
		if (signedInputItemProvider == null) {
			signedInputItemProvider = new SignedInputItemProvider(this);
		}

		return signedInputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.Statistics} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatisticsItemProvider statisticsItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.Statistics}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatisticsAdapter() {
		if (statisticsItemProvider == null) {
			statisticsItemProvider = new StatisticsItemProvider(this);
		}

		return statisticsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.StatisticDatas} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatisticDatasItemProvider statisticDatasItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.StatisticDatas}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatisticDatasAdapter() {
		if (statisticDatasItemProvider == null) {
			statisticDatasItemProvider = new StatisticDatasItemProvider(this);
		}

		return statisticDatasItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.CountryRegion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CountryRegionItemProvider countryRegionItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.CountryRegion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCountryRegionAdapter() {
		if (countryRegionItemProvider == null) {
			countryRegionItemProvider = new CountryRegionItemProvider(this);
		}

		return countryRegionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.wrs.model.wrs.StatisticsSource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatisticsSourceItemProvider statisticsSourceItemProvider;

	/**
	 * This creates an adapter for a {@link org.wrs.model.wrs.StatisticsSource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatisticsSourceAdapter() {
		if (statisticsSourceItemProvider == null) {
			statisticsSourceItemProvider = new StatisticsSourceItemProvider(this);
		}

		return statisticsSourceItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (wrsItemProvider != null)
			wrsItemProvider.dispose();
		if (treasuryItemProvider != null)
			treasuryItemProvider.dispose();
		if (transferVaultItemProvider != null)
			transferVaultItemProvider.dispose();
		if (genesisItemProvider != null)
			genesisItemProvider.dispose();
		if (assetItemProvider != null)
			assetItemProvider.dispose();
		if (worldEconomyItemProvider != null)
			worldEconomyItemProvider.dispose();
		if (nationalEconomiesItemProvider != null)
			nationalEconomiesItemProvider.dispose();
		if (countryItemProvider != null)
			countryItemProvider.dispose();
		if (fiatCurrencyItemProvider != null)
			fiatCurrencyItemProvider.dispose();
		if (thingItemProvider != null)
			thingItemProvider.dispose();
		if (individualItemProvider != null)
			individualItemProvider.dispose();
		if (legalEntityItemProvider != null)
			legalEntityItemProvider.dispose();
		if (accountItemProvider != null)
			accountItemProvider.dispose();
		if (supplyControlItemProvider != null)
			supplyControlItemProvider.dispose();
		if (accountsItemProvider != null)
			accountsItemProvider.dispose();
		if (transactionItemProvider != null)
			transactionItemProvider.dispose();
		if (registeredAssetsItemProvider != null)
			registeredAssetsItemProvider.dispose();
		if (abstractAccountItemProvider != null)
			abstractAccountItemProvider.dispose();
		if (transactionCollectionItemProvider != null)
			transactionCollectionItemProvider.dispose();
		if (nodeItemProvider != null)
			nodeItemProvider.dispose();
		if (networkEngineItemProvider != null)
			networkEngineItemProvider.dispose();
		if (countriesItemProvider != null)
			countriesItemProvider.dispose();
		if (nodesItemProvider != null)
			nodesItemProvider.dispose();
		if (identitiesItemProvider != null)
			identitiesItemProvider.dispose();
		if (transactionsItemProvider != null)
			transactionsItemProvider.dispose();
		if (abstractTransactionItemProvider != null)
			abstractTransactionItemProvider.dispose();
		if (nodeAccountItemProvider != null)
			nodeAccountItemProvider.dispose();
		if (transactionConditionsItemProvider != null)
			transactionConditionsItemProvider.dispose();
		if (transactionConditionItemProvider != null)
			transactionConditionItemProvider.dispose();
		if (signedInputItemProvider != null)
			signedInputItemProvider.dispose();
		if (statisticsItemProvider != null)
			statisticsItemProvider.dispose();
		if (statisticDatasItemProvider != null)
			statisticDatasItemProvider.dispose();
		if (countryRegionItemProvider != null)
			countryRegionItemProvider.dispose();
		if (statisticsSourceItemProvider != null)
			statisticsSourceItemProvider.dispose();
	}

}
